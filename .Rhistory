tt <- rbind(cx, cy)
tt
nxt()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
midst(x, y, cx, cy)
?midst
?midst
??midst
bye()
swirl()
midst(x, y, cx, cy)
mdist(x, y, cx, cy)
swirl()
swirl()
bye()
bye()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
x
y
View(mdist)
library(swirl)
swirl()
play()
set.seed(12)
cv <- rnorm(12);
cb<- cv+15+rnorm(12);
cv
cb
ct<- cb * 1.5 + rnorm(12);
ct
dfw <- data.frame(cv, cb, ct)
dfw
dfw <- data.frame(cv, cb, ct, cv, cb, ct)
dfw
nxt()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
play()
apply(dfw, 1, mean)
apply(dfw, 2, mean)
apply(X = dfw, MARGIN = 1, FUN = mean)
apply(X = dfw, MARGIN = 2, FUN = mean)
apply(X = dfw, MARGIN = 2, FUN = rnorm)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
set.seed(12)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
apply(X = dfw, MARGIN = 2, FUN = rnorm, 2, .6)
nxt()
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, pch = 9, cex = 2, col = cols1, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
points(x, y, pch = 19, cex = 2, col = kmObj$cluster)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(kmObj$centers,col=c("black", "red", "green"),pch=3,cex=3, lwd = 3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,2)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,3)$cluster,pch=19,cex=2)
iris
library(ggvis)
install.packages("ggvis")
library(ggvis)
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
r <-c(1:20)
normalize(r)
iris[1:4]
iris[1:4,]
iris[,1:4]
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
iris_norm
r <-c(1:20), c(21:40)
r <- rbind(c(1:20), c(21:40)
)
r
normalize(r)
ttt <- normalize(r)
ttt
round(ttt, 3)
round(ttt, 2)
round(ttt, 0)
summary(iris_norm)
?sample
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind
ind
ind
ind
set.seed(1234)
ind
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
install.packages("gmodels")
gmodels::ci(iris.training)
gmodels::ci(ttt)
install.packages("e1071")
?e1071
library("e1071")
?e1071
??e1071
rm(list = ls())
library(swirl)
swirl()
dim(ssd)
names(ssd[562,563])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
bye()
rm(list = ls())
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day < today()
this_day <- today()
this_day
play()
nxt()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1975)
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hour = hour(now()), minute = minute(now()), second = second(now()));
this_moment
hour(now())
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hour(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(time = arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(time = arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- ydm("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
use as.period(how_long)
as.period(how_long)
stopwatch()
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x = x[, 1:3])
mdist <- dist(x = sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
swirl()
library(swirl)
swirl()
mdist <- i c]
mdist <- dist(sub1[,10:12])
mdist
hclustering <- hclust(mdist)
myplclust(hclustering)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
View(sub1)
View(sub1)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(maxCon[,10:12])
mdist <- dist(svd1[,10:12],maxCon)
view(maxCon)
View(sub1)
View(sub1)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
View(sub1)
View(sub1)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
View(sub1)
View(sub1)
table(kClust$cluster, sub1$activity)
View(sub1)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(x$y)
View(sub1)
dim(kClust$centers)
View(sub1)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
View(sub1)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
strsplit(x = cnames, split = "|",fixed = TRUE)
cnames <-strsplit(x = cnames, split = "|",fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d");
play()
library(lubridate)
datesw <- ymd(dates)
head(datesw)
head(dates)
nxt()
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(x, y)
both <- intersect(x, y)
both <- intersect(site0, site1)
both
play()
?"intersect"
?intersect
nxt()
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site == )
cnt0 <- subset(pm0, State.Code == 36 & county.site == 1)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2))
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, Sample.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state"
)
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52), mrg[,3]))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1,52), rep(2,52), mrg[, 2], mrg[, 3])
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
rm(list = ls())
library(swirl)
swirl()
3
11/12
deck
1/52
52
4/52
0
12/52
2/21
2/51
library(swirl)
swirl()
0.8*0.8
0.64
mypdf
integrate(mypdf,lower = 0, upper = 1.6)
200^0.5
2^0.5
library(swirl)
swirl()
library(XML)
library(httr)
url <- "http://www.wikiart.org/en/claude-monet/mode/all-paintings-by-alphabet/"
hrefs <- list()
for (i in 1:23) {
response <- GET(paste0(url,i))
doc      <- content(response,type="text/html")
hrefs    <- c(hrefs,doc["//p[@class='pb5']/a/@href"])
}
url      <- "http://www.wikiart.org"
xPath    <- c(pictureName = "//h1[@itemprop='name']",
date        = "//span[@itemprop='dateCreated']",
author      = "//a[@itemprop='author']",
style       = "//span[@itemprop='style']",
genre       = "//span[@itemprop='genre']")
get.picture <- function(href) {
response <- GET(paste0(url,href))
doc      <- content(response,type="text/html")
info     <- sapply(xPath,function(xp)ifelse(length(doc[xp])==0,NA,xmlValue(doc[xp][[1]])))
}
pictures <- do.call(rbind,lapply(hrefs,get.picture))
head(pictures)
library(swirl)
swirl()
(.997*.001)
(1-.997)*(1-.001)
(1-.985)*(1-.001)
(0.000997)/(.000997+.014985)
pop <- rnorm(100000)
head(pop)
plot(pop)
hist(pop)
max(pop)
min(pop)
mean(pop)
median(pop)
density(pop)
?quinif
?qunif
??qunif
?qunif
tt <- rep(.1, 10)
tt
hist(tt)
qunif(tt)
quantile()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
tt <- temp$X * temp$Prob
str(temp)
tt <- temp[1,] * temp[2,]
tt
sum(tt)/ sum(1)
setwd("D:/Cloud Storage/Google Drive/Coursera/00. GitHub/RepData_PeerAssessment1")
library(lubridate)
activity <- read.csv("activity.csv")
activity$date <- ymd(activity$date)
activity
clean.values <- subset(activity[complete.cases(activity), ],)
activity.patt  <- with(data = clean.values, tapply(X = steps, INDEX = date, FUN = sum))
activity.patt  <- data.frame(date = names(activity.patt), tot.steps = activity.patt)
hist(activity.patt$tot.steps, xlab = "Total Steps",
main = "Histogram of total number \n of steps taken each day")
mean(activity.patt$tot.steps)
median(activity.patt$tot.steps)
avg.steps <- with(data = clean.values, tapply(X = steps, INDEX = interval, FUN = mean))
avg.steps  <- data.frame(interval = names(avg.steps), avgsteps = avg.steps)
library(ggplot2)
g <- ggplot(data = avg.steps, mapping = aes(y = avgsteps,  x = interval, group = 1))
g <- g + geom_point(inherit.aes = TRUE)
g <- g  + geom_line(mapping = aes(y = avgsteps,  x = interval))
g
dim(avg.steps)
svg("dfgd.svg")
g <- ggplot(data = avg.steps, mapping = aes(y = avgsteps,  x = interval, group = 1))
g <- g + geom_point(inherit.aes = TRUE)
g <- g  + geom_line(mapping = aes(y = avgsteps,  x = interval))
g
dev.off()
which.max(avg.steps$avgsteps)
View(avg.steps)
max.int.steps <- tapply(X = clean.values$steps, INDEX = clean.values$date,
function(r){all.interval[which.max(r)]})
all.interval <- unique(clean.values$interval)
max.int.steps <- tapply(X = clean.values$steps, INDEX = clean.values$date,
function(r){all.interval[which.max(r)]})
which.max(max.int.steps)
max.int.steps
all.interval <- unique(clean.values$interval)
max.int.steps <- tapply(X = clean.values$steps, INDEX = clean.values$interval,
function(r){all.interval[which.max(r)]})
max.int.steps
which.max(max.int.steps)
sum(is.na(activity$steps))
